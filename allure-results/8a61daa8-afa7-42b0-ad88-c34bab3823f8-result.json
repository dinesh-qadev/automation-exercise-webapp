{"name": "Submit Contact Us Form", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Press OK to proceed!\nMessage: unexpected alert open: {Alert text : Press OK to proceed!}\n  (Session info: chrome=136.0.7103.114)\nStacktrace:\n\tGetHandleVerifier [0x00F9FC03+61635]\n\tGetHandleVerifier [0x00F9FC44+61700]\n\t(No symbol) [0x00DC05D3]\n\t(No symbol) [0x00E4EF4E]\n\t(No symbol) [0x00E2D096]\n\t(No symbol) [0x00DFC840]\n\t(No symbol) [0x00DFD6A4]\n\tGetHandleVerifier [0x01224523+2701795]\n\tGetHandleVerifier [0x0121FCA6+2683238]\n\tGetHandleVerifier [0x0123A9EE+2793134]\n\tGetHandleVerifier [0x00FB68C5+155013]\n\tGetHandleVerifier [0x00FBCFAD+181357]\n\tGetHandleVerifier [0x00FA7458+92440]\n\tGetHandleVerifier [0x00FA7600+92864]\n\tGetHandleVerifier [0x00F91FF0+5296]\n\tBaseThreadInitThunk [0x757BFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x779782AE+286]\n\tRtlGetAppContainerNamedObjectPath [0x7797827E+238]", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5b26a3a3796527f1f08cfcebe6e8b539\")>\n\n    @allure.feature(\"Contact Us\")\n    @allure.severity(allure.severity_level.MINOR)\n    @allure.title(\"Submit Contact Us Form\")\n    @allure.description(\"Verify user can submit contact form and success message is displayed.\")\n    def test_006_contact_us_form(browser):\n        # Initialize page objects\n        home_page = HomePage(browser)\n        contact_us_page = ContactUsPage(browser)\n    \n        #Initialize TestData\n        messeges = load_test_data(\"contact_us.json\")\n        required_testdata = messeges[\"contact_form\"]\n    \n        # Step 1: Verify home page is displayed by checking if 'Home' link is active\n        assert home_page.is_home_page_displayed(), \"Home page is not visible or 'Home' link is not active\"\n    \n        # Step 2: Click on 'Contact Us' button\n        home_page.click_contact_us()\n    \n        # Step 3: Verify 'GET IN TOUCH' header is visible on the Contact Us page\n        assert contact_us_page.is_get_in_touch_header_visible(), \"'GET IN TOUCH' header is not visible\"\n    \n        # Step 4: Enter name, email, subject, and message\n        name = required_testdata[\"name\"]\n        email = required_testdata[\"email\"]\n        subject = required_testdata[\"subject\"]\n        message = required_testdata[\"message\"]\n        contact_us_page.fill_contact_form(name, email, subject, message)\n    \n        # Step 5: Upload file\n        file_path = get_resource_file_path(\"contact_us_upload_01.png\")\n        # Provide the correct path to the file\n        contact_us_page.upload_file(file_path)\n    \n        # Step 6: Click 'Submit' button\n        contact_us_page.click_submit_button()\n    \n        # Step 7: Click 'OK' button on success pop-up\n>       contact_us_page.click_ok_button()\n\ntestCases\\test_006_contact_us_form.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\contact_page.py:41: in click_ok_button\n    self.click(self.OK_BUTTON)\npageObjects\\base_page.py:43: in click\n    element = self.wait.until(EC.element_to_be_clickable(target))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:633: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020B6D3FDA50>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Press OK to proceed!\"},\"error\":\"unexpected alert open\",\"message\":\"...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x779782AE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7797827E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Press OK to proceed!\nE           Message: unexpected alert open: {Alert text : Press OK to proceed!}\nE             (Session info: chrome=136.0.7103.114)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x00F9FC03+61635]\nE           \tGetHandleVerifier [0x00F9FC44+61700]\nE           \t(No symbol) [0x00DC05D3]\nE           \t(No symbol) [0x00E4EF4E]\nE           \t(No symbol) [0x00E2D096]\nE           \t(No symbol) [0x00DFC840]\nE           \t(No symbol) [0x00DFD6A4]\nE           \tGetHandleVerifier [0x01224523+2701795]\nE           \tGetHandleVerifier [0x0121FCA6+2683238]\nE           \tGetHandleVerifier [0x0123A9EE+2793134]\nE           \tGetHandleVerifier [0x00FB68C5+155013]\nE           \tGetHandleVerifier [0x00FBCFAD+181357]\nE           \tGetHandleVerifier [0x00FA7458+92440]\nE           \tGetHandleVerifier [0x00FA7600+92864]\nE           \tGetHandleVerifier [0x00F91FF0+5296]\nE           \tBaseThreadInitThunk [0x757BFCC9+25]\nE           \tRtlGetAppContainerNamedObjectPath [0x779782AE+286]\nE           \tRtlGetAppContainerNamedObjectPath [0x7797827E+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:231: UnexpectedAlertPresentException"}, "description": "Verify user can submit contact form and success message is displayed.", "attachments": [{"name": "screenshot_on_failure", "source": "753b2c8c-684d-4819-ba31-7d45fb744b85-attachment.png", "type": "image/png"}, {"name": "log", "source": "451c8aa2-3d6b-4d52-bf9e-8e92375b2c99-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "d761f8b6-2c57-4283-b2f4-5b2090b047b5-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "7801d130-6989-472a-a1c3-f01c8cd77bb4-attachment.txt", "type": "text/plain"}], "start": 1748656822852, "stop": 1748656826894, "uuid": "aad18e49-d297-4c1c-9a5e-de2a07a316d2", "historyId": "d85eb3c24f41a3fd43349fedfc6e686d", "testCaseId": "d85eb3c24f41a3fd43349fedfc6e686d", "fullName": "testCases.test_006_contact_us_form#test_006_contact_us_form", "labels": [{"name": "feature", "value": "Contact Us"}, {"name": "severity", "value": "minor"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_006_contact_us_form"}, {"name": "host", "value": "DESKTOP-6JB123S"}, {"name": "thread", "value": "12136-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_006_contact_us_form"}]}