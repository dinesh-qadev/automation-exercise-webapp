{"name": "Search Products and Verify Cart After Login", "status": "failed", "statusDetails": {"message": "AssertionError: Product 1 price/quantity/total is incorrect\nassert False\n +  where False = verify_product_details(2, 'Rs. 400')\n +    where verify_product_details = <pageObjects.cart_page.CartPage object at 0x000002C81EF6BFD0>.verify_product_details", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"923e52a9b45bf1faf7eb7de6f20a58d8\")>\n\n    @allure.feature(\"Cart\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title(\"Search Products and Verify Cart After Login\")\n    @allure.description(\"Verify searched products are added to cart and persist after user login.\")\n    def test_search_products_and_verify_cart_after_login(browser):\n        home = HomePage(browser)\n        products = ProductsPage(browser)\n        cart = CartPage(browser)\n        signup_login = SignupLoginPage(browser)\n    \n        # 3. Click on 'Products' button\n        home.click_products()\n    \n        # 4. Verify user is navigated to ALL PRODUCTS page successfully\n        assert products.is_all_products_page_displayed(), \"All Products page not visible\"\n    \n        # 5. Enter product name in search input and click search button\n        product_info = load_test_data(\"products.json\")  # Test Data initialized\n        search_data = product_info[\"search\"]\n    \n        product_name = search_data[\"product_search\"]  # Fetched product name from json\n        products.enter_search_text(product_name)\n        products.click_search_button()\n    \n        # 6. Verify 'SEARCHED PRODUCTS' is visible\n        assert products.is_searched_products_section_visible(), \"Searched Products section not visible\"\n    \n        # 7. Verify all the products related to search are visible\n        assert products.are_search_results_visible(product_name), f\"Search results for '{product_name}' are not displayed correctly\"\n    \n        # 8. Add those products to cart: for faster test we are only adding two products to cart\n        product_1_name, product_1_price = products.hover_and_add_to_cart_and_get_price(1) # over and add first product to cart, capture price\n    \n        print(product_1_name)\n        products.click_continue_shopping()\n        product_2_name, product_2_price = products.hover_and_add_to_cart_and_get_price(2) # Hover and add second product to cart, capture price\n    \n        added_products = [product_1_name, product_2_name]\n        # 9. Click 'Cart' button and verify that products are visible in cart\n        products.click_view_cart()\n    \n        assert cart.are_products_in_cart(added_products), \"First product not found in cart\"  # Verify Product-1 is on cart\n        #assert cart.are_products_in_cart(product_2_name), \"Second product not found in cart\"  # Verify Product-2 is on cart\n    \n        assert cart.verify_product_details(1, product_1_price), \"Product 1 price/quantity/total is incorrect\"  # Verify Product-1 details is correct on cart\n        assert cart.verify_product_details(2, product_2_price), \"Product 2 price/quantity/total is incorrect\"  # Verify Product-1 details is correct on cart\n    \n        # 10. Click 'Signup / Login' button and submit login details\n        home.click_signup_login()\n        user_info = load_test_data(\"users.json\")  # Test data loaded from json file\n        correct_credential = user_info[\"valid_user\"]\n        signup_login.login_user(\n            email=correct_credential[\"email\"],\n            password=correct_credential[\"password\"])\n    \n        # 11. Again, go to Cart page\n        home.click_cart_button()\n    \n        # 12. Verify that those products are visible in cart after login as well\n        assert cart.are_products_in_cart(added_products), \"Products are not found in cart\"  # Verify Product is on cart\n        #assert cart.are_products_in_cart(product_2_name), \"Second product not found in cart\"  # Verify Product-2 is on cart\n    \n>       assert cart.verify_product_details(2,\n                                           product_1_price), \"Product 1 price/quantity/total is incorrect\"  # Verify Product-1 details is correct on cart\nE       AssertionError: Product 1 price/quantity/total is incorrect\nE       assert False\nE        +  where False = verify_product_details(2, 'Rs. 400')\nE        +    where verify_product_details = <pageObjects.cart_page.CartPage object at 0x000002C81EF6BFD0>.verify_product_details\n\ntestCases\\test_020_search_products_and_verify_cart_after_login.py:71: AssertionError"}, "description": "Verify searched products are added to cart and persist after user login.", "attachments": [{"name": "screenshot_on_failure", "source": "d5c45b5e-b1c9-4335-a5a8-8984f3a08f2b-attachment.png", "type": "image/png"}, {"name": "log", "source": "2ac21633-0695-4f5b-95ab-0ea099cf532c-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "f8d61d66-dd81-4ef9-a6c4-5a83ae615756-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "8d29a735-55a3-4173-b84f-1346d75a4c8d-attachment.txt", "type": "text/plain"}], "start": 1748283476406, "stop": 1748283488600, "uuid": "938ce2be-156f-43af-b0de-41670038e656", "historyId": "d9f3acb1e8b5f7d51dcda027c0949608", "testCaseId": "d9f3acb1e8b5f7d51dcda027c0949608", "fullName": "testCases.test_020_search_products_and_verify_cart_after_login#test_search_products_and_verify_cart_after_login", "labels": [{"name": "feature", "value": "Cart"}, {"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_020_search_products_and_verify_cart_after_login"}, {"name": "host", "value": "DESKTOP-6JB123S"}, {"name": "thread", "value": "5056-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_020_search_products_and_verify_cart_after_login"}]}