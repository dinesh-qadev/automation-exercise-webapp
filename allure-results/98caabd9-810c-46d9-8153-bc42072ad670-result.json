{"name": "Verify Home Page Subscription", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: chrome=136.0.7103.114)\nStacktrace:\n\tGetHandleVerifier [0x009FFC03+61635]\n\tGetHandleVerifier [0x009FFC44+61700]\n\t(No symbol) [0x008205D3]\n\t(No symbol) [0x0081DBE0]\n\t(No symbol) [0x008113A8]\n\t(No symbol) [0x00812CF0]\n\t(No symbol) [0x00811638]\n\t(No symbol) [0x00811193]\n\t(No symbol) [0x00810EA1]\n\t(No symbol) [0x0080EE80]\n\t(No symbol) [0x0080F81B]\n\t(No symbol) [0x00823FFE]\n\t(No symbol) [0x008AF217]\n\t(No symbol) [0x0088D29C]\n\t(No symbol) [0x008AE61B]\n\t(No symbol) [0x0088D096]\n\t(No symbol) [0x0085C840]\n\t(No symbol) [0x0085D6A4]\n\tGetHandleVerifier [0x00C84523+2701795]\n\tGetHandleVerifier [0x00C7FCA6+2683238]\n\tGetHandleVerifier [0x00C9A9EE+2793134]\n\tGetHandleVerifier [0x00A168C5+155013]\n\tGetHandleVerifier [0x00A1CFAD+181357]\n\tGetHandleVerifier [0x00A07458+92440]\n\tGetHandleVerifier [0x00A07600+92864]\n\tGetHandleVerifier [0x009F1FF0+5296]\n\tBaseThreadInitThunk [0x76E4FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x775E82AE+286]\n\tRtlGetAppContainerNamedObjectPath [0x775E827E+238]", "trace": "config = <class 'configurations.config.QAConfig'>\n\n    @pytest.fixture(scope=\"function\")\n    def browser(config):\n        # Setup Chrome browser\n        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))\n        driver.maximize_window()\n        #driver.get(\"https://www.automationexercise.com/\")\n>       driver.get(config.BASE_URL)\n\ntestCases\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002E1C9ECCB50>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_NAME_NOT_RESOLVED\\\\n  (...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x775E82AE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x775E827E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\nE         (Session info: chrome=136.0.7103.114)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x009FFC03+61635]\nE       \tGetHandleVerifier [0x009FFC44+61700]\nE       \t(No symbol) [0x008205D3]\nE       \t(No symbol) [0x0081DBE0]\nE       \t(No symbol) [0x008113A8]\nE       \t(No symbol) [0x00812CF0]\nE       \t(No symbol) [0x00811638]\nE       \t(No symbol) [0x00811193]\nE       \t(No symbol) [0x00810EA1]\nE       \t(No symbol) [0x0080EE80]\nE       \t(No symbol) [0x0080F81B]\nE       \t(No symbol) [0x00823FFE]\nE       \t(No symbol) [0x008AF217]\nE       \t(No symbol) [0x0088D29C]\nE       \t(No symbol) [0x008AE61B]\nE       \t(No symbol) [0x0088D096]\nE       \t(No symbol) [0x0085C840]\nE       \t(No symbol) [0x0085D6A4]\nE       \tGetHandleVerifier [0x00C84523+2701795]\nE       \tGetHandleVerifier [0x00C7FCA6+2683238]\nE       \tGetHandleVerifier [0x00C9A9EE+2793134]\nE       \tGetHandleVerifier [0x00A168C5+155013]\nE       \tGetHandleVerifier [0x00A1CFAD+181357]\nE       \tGetHandleVerifier [0x00A07458+92440]\nE       \tGetHandleVerifier [0x00A07600+92864]\nE       \tGetHandleVerifier [0x009F1FF0+5296]\nE       \tBaseThreadInitThunk [0x76E4FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x775E82AE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x775E827E+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "description": "Verify user can subscribe via email on the home page footer.", "start": 1748282523808, "stop": 1748282523808, "uuid": "84b85f1e-dd39-4b32-8fe1-e9254a513f39", "historyId": "1008a8f3e4943b2a8fd5c286866f7105", "testCaseId": "1008a8f3e4943b2a8fd5c286866f7105", "fullName": "testCases.test_010_subscription_homepage#test_subscription_in_home_page", "labels": [{"name": "severity", "value": "minor"}, {"name": "feature", "value": "Products"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_010_subscription_homepage"}, {"name": "host", "value": "DESKTOP-6JB123S"}, {"name": "thread", "value": "7076-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_010_subscription_homepage"}]}