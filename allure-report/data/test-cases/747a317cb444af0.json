{"uid":"747a317cb444af0","name":"Submit Contact Us Form","fullName":"testCases.test_006_contact_us_form#test_006_contact_us_form","historyId":"d85eb3c24f41a3fd43349fedfc6e686d","time":{"start":1748490916473,"stop":1748490917551,"duration":1078},"description":"Verify user can submit contact form and success message is displayed.","descriptionHtml":"<p>Verify user can submit contact form and success message is displayed.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\Dell\\Downloads\\2149192357.jpg\n  (Session info: chrome=136.0.7103.92)\nStacktrace:\n#0 0x5615389cb71a <unknown>\n#1 0x56153846e0a0 <unknown>\n#2 0x5615384b82d4 <unknown>\n#3 0x5615384e53a2 <unknown>\n#4 0x5615384b351a <unknown>\n#5 0x5615384e556e <unknown>\n#6 0x56153850b2a0 <unknown>\n#7 0x5615384e5173 <unknown>\n#8 0x5615384b1d4b <unknown>\n#9 0x5615384b29b1 <unknown>\n#10 0x5615389908cb <unknown>\n#11 0x5615389947ca <unknown>\n#12 0x561538978622 <unknown>\n#13 0x561538995354 <unknown>\n#14 0x56153895d45f <unknown>\n#15 0x5615389b94f8 <unknown>\n#16 0x5615389b96d6 <unknown>\n#17 0x5615389ca586 <unknown>\n#18 0x7f862229caa4 <unknown>\n#19 0x7f8622329c3c <unknown>","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e7dacdcd147f266c05720f3784c06f7e\")>\n\n    @allure.feature(\"Contact Us\")\n    @allure.severity(allure.severity_level.MINOR)\n    @allure.title(\"Submit Contact Us Form\")\n    @allure.description(\"Verify user can submit contact form and success message is displayed.\")\n    def test_006_contact_us_form(browser):\n        # Initialize page objects\n        home_page = HomePage(browser)\n        contact_us_page = ContactUsPage(browser)\n    \n        #Initialize TestData\n        messeges = load_test_data(\"contact_us.json\")\n        required_testdata = messeges[\"contact_form\"]\n    \n        # Step 1: Verify home page is displayed by checking if 'Home' link is active\n        assert home_page.is_home_page_displayed(), \"Home page is not visible or 'Home' link is not active\"\n    \n        # Step 2: Click on 'Contact Us' button\n        home_page.click_contact_us()\n    \n        # Step 3: Verify 'GET IN TOUCH' header is visible on the Contact Us page\n        assert contact_us_page.is_get_in_touch_header_visible(), \"'GET IN TOUCH' header is not visible\"\n    \n        # Step 4: Enter name, email, subject, and message\n        name = required_testdata[\"name\"]\n        email = required_testdata[\"email\"]\n        subject = required_testdata[\"subject\"]\n        message = required_testdata[\"message\"]\n        contact_us_page.fill_contact_form(name, email, subject, message)\n    \n        # Step 5: Upload file\n        file_path = required_testdata[\"filepath\"]\n        # Provide the correct path to the file\n>       contact_us_page.upload_file(file_path)\n\ntestCases/test_006_contact_us_form.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageObjects/contact_page.py:33: in upload_file\n    self.enter_text(self.UPLOAD_FILE_INPUT, file_path)\npageObjects/base_page.py:55: in enter_text\n    element.send_keys(text)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:303: in send_keys\n    self._execute(\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f575ddab010>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : C:\\\\\\\\Use...\\\\n#17 0x5615389ca586 \\\\u003Cunknown>\\\\n#18 0x7f862229caa4 \\\\u003Cunknown>\\\\n#19 0x7f8622329c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\Dell\\Downloads\\2149192357.jpg\nE         (Session info: chrome=136.0.7103.92)\nE       Stacktrace:\nE       #0 0x5615389cb71a <unknown>\nE       #1 0x56153846e0a0 <unknown>\nE       #2 0x5615384b82d4 <unknown>\nE       #3 0x5615384e53a2 <unknown>\nE       #4 0x5615384b351a <unknown>\nE       #5 0x5615384e556e <unknown>\nE       #6 0x56153850b2a0 <unknown>\nE       #7 0x5615384e5173 <unknown>\nE       #8 0x5615384b1d4b <unknown>\nE       #9 0x5615384b29b1 <unknown>\nE       #10 0x5615389908cb <unknown>\nE       #11 0x5615389947ca <unknown>\nE       #12 0x561538978622 <unknown>\nE       #13 0x561538995354 <unknown>\nE       #14 0x56153895d45f <unknown>\nE       #15 0x5615389b94f8 <unknown>\nE       #16 0x5615389b96d6 <unknown>\nE       #17 0x5615389ca586 <unknown>\nE       #18 0x7f862229caa4 <unknown>\nE       #19 0x7f8622329c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidArgumentException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"config","time":{"start":1748490871998,"stop":1748490871998,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"browser","time":{"start":1748490914846,"stop":1748490916472,"duration":1626},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Verify user can submit contact form and success message is displayed.","status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\Dell\\Downloads\\2149192357.jpg\n  (Session info: chrome=136.0.7103.92)\nStacktrace:\n#0 0x5615389cb71a <unknown>\n#1 0x56153846e0a0 <unknown>\n#2 0x5615384b82d4 <unknown>\n#3 0x5615384e53a2 <unknown>\n#4 0x5615384b351a <unknown>\n#5 0x5615384e556e <unknown>\n#6 0x56153850b2a0 <unknown>\n#7 0x5615384e5173 <unknown>\n#8 0x5615384b1d4b <unknown>\n#9 0x5615384b29b1 <unknown>\n#10 0x5615389908cb <unknown>\n#11 0x5615389947ca <unknown>\n#12 0x561538978622 <unknown>\n#13 0x561538995354 <unknown>\n#14 0x56153895d45f <unknown>\n#15 0x5615389b94f8 <unknown>\n#16 0x5615389b96d6 <unknown>\n#17 0x5615389ca586 <unknown>\n#18 0x7f862229caa4 <unknown>\n#19 0x7f8622329c3c <unknown>","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e7dacdcd147f266c05720f3784c06f7e\")>\n\n    @allure.feature(\"Contact Us\")\n    @allure.severity(allure.severity_level.MINOR)\n    @allure.title(\"Submit Contact Us Form\")\n    @allure.description(\"Verify user can submit contact form and success message is displayed.\")\n    def test_006_contact_us_form(browser):\n        # Initialize page objects\n        home_page = HomePage(browser)\n        contact_us_page = ContactUsPage(browser)\n    \n        #Initialize TestData\n        messeges = load_test_data(\"contact_us.json\")\n        required_testdata = messeges[\"contact_form\"]\n    \n        # Step 1: Verify home page is displayed by checking if 'Home' link is active\n        assert home_page.is_home_page_displayed(), \"Home page is not visible or 'Home' link is not active\"\n    \n        # Step 2: Click on 'Contact Us' button\n        home_page.click_contact_us()\n    \n        # Step 3: Verify 'GET IN TOUCH' header is visible on the Contact Us page\n        assert contact_us_page.is_get_in_touch_header_visible(), \"'GET IN TOUCH' header is not visible\"\n    \n        # Step 4: Enter name, email, subject, and message\n        name = required_testdata[\"name\"]\n        email = required_testdata[\"email\"]\n        subject = required_testdata[\"subject\"]\n        message = required_testdata[\"message\"]\n        contact_us_page.fill_contact_form(name, email, subject, message)\n    \n        # Step 5: Upload file\n        file_path = required_testdata[\"filepath\"]\n        # Provide the correct path to the file\n>       contact_us_page.upload_file(file_path)\n\ntestCases/test_006_contact_us_form.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageObjects/contact_page.py:33: in upload_file\n    self.enter_text(self.UPLOAD_FILE_INPUT, file_path)\npageObjects/base_page.py:55: in enter_text\n    element.send_keys(text)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:303: in send_keys\n    self._execute(\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f575ddab010>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : C:\\\\\\\\Use...\\\\n#17 0x5615389ca586 \\\\u003Cunknown>\\\\n#18 0x7f862229caa4 \\\\u003Cunknown>\\\\n#19 0x7f8622329c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\Dell\\Downloads\\2149192357.jpg\nE         (Session info: chrome=136.0.7103.92)\nE       Stacktrace:\nE       #0 0x5615389cb71a <unknown>\nE       #1 0x56153846e0a0 <unknown>\nE       #2 0x5615384b82d4 <unknown>\nE       #3 0x5615384e53a2 <unknown>\nE       #4 0x5615384b351a <unknown>\nE       #5 0x5615384e556e <unknown>\nE       #6 0x56153850b2a0 <unknown>\nE       #7 0x5615384e5173 <unknown>\nE       #8 0x5615384b1d4b <unknown>\nE       #9 0x5615384b29b1 <unknown>\nE       #10 0x5615389908cb <unknown>\nE       #11 0x5615389947ca <unknown>\nE       #12 0x561538978622 <unknown>\nE       #13 0x561538995354 <unknown>\nE       #14 0x56153895d45f <unknown>\nE       #15 0x5615389b94f8 <unknown>\nE       #16 0x5615389b96d6 <unknown>\nE       #17 0x5615389ca586 <unknown>\nE       #18 0x7f862229caa4 <unknown>\nE       #19 0x7f8622329c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidArgumentException","steps":[],"attachments":[{"uid":"b0c500568a1bafe7","name":"screenshot_on_failure","source":"b0c500568a1bafe7.png","type":"image/png","size":116579},{"uid":"4e3463124fb87f84","name":"log","source":"4e3463124fb87f84.txt","type":"text/plain","size":723},{"uid":"8453a48045baa52","name":"stdout","source":"8453a48045baa52.txt","type":"text/plain","size":5},{"uid":"54f2c20609f1b210","name":"stderr","source":"54f2c20609f1b210.txt","type":"text/plain","size":1340}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"browser::0","time":{"start":1748490918001,"stop":1748490918113,"duration":112},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"minor"},{"name":"feature","value":"Contact Us"},{"name":"parentSuite","value":"testCases"},{"name":"suite","value":"test_006_contact_us_form"},{"name":"host","value":"pkrvmf6wy0o8zjz"},{"name":"thread","value":"3738-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCases.test_006_contact_us_form"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"minor","retries":[{"uid":"a526bc40f725fc3","status":"passed","time":{"start":1748369928840,"stop":1748369931538,"duration":2698}},{"uid":"2ad93d0558052830","status":"passed","time":{"start":1748366269284,"stop":1748366273759,"duration":4475}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"747a317cb444af0.json","parameterValues":[]}