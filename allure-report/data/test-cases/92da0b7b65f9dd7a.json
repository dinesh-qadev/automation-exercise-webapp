{"uid":"92da0b7b65f9dd7a","name":"View and Cart Brand Products","fullName":"testCases.test_019_view_brand_products#test_view_brand_products","time":{"start":1748370181880,"stop":1748370181995,"duration":115},"description":"Verify user can view products by brand and add them to the cart.","descriptionHtml":"<p>Verify user can view products by brand and add them to the cart.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=136.0.7103.114)\nStacktrace:\n\tGetHandleVerifier [0x010CFC03+61635]\n\tGetHandleVerifier [0x010CFC44+61700]\n\t(No symbol) [0x00EF05D3]\n\t(No symbol) [0x00ECFBC9]\n\t(No symbol) [0x00F63CBE]\n\t(No symbol) [0x00F7DF19]\n\t(No symbol) [0x00F5D096]\n\t(No symbol) [0x00F2C840]\n\t(No symbol) [0x00F2D6A4]\n\tGetHandleVerifier [0x01354523+2701795]\n\tGetHandleVerifier [0x0134FCA6+2683238]\n\tGetHandleVerifier [0x0136A9EE+2793134]\n\tGetHandleVerifier [0x010E68C5+155013]\n\tGetHandleVerifier [0x010ECFAD+181357]\n\tGetHandleVerifier [0x010D7458+92440]\n\tGetHandleVerifier [0x010D7600+92864]\n\tGetHandleVerifier [0x010C1FF0+5296]\n\tBaseThreadInitThunk [0x76E4FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x775E82AE+286]\n\tRtlGetAppContainerNamedObjectPath [0x775E827E+238]","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5cb1363223703f147d1da11dbb8eb7d2\")>\n\n    @allure.feature(\"Products\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.title(\"View and Cart Brand Products\")\n    @allure.description(\"Verify user can view products by brand and add them to the cart.\")\n    def test_view_brand_products(browser):\n        home = HomePage(browser)\n        brands = BrandsPage(browser)\n    \n        # Step 3: Click on 'Products' button\n>       home.click_products()\n\ntestCases\\test_019_view_brand_products.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\home_page.py:69: in click_products\n    self.click(self.PRODUCTS_BUTTON)\npageObjects\\base_page.py:43: in click\n    element = self.wait.until(EC.element_to_be_clickable(target))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:633: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000200AAC48390>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x775E82AE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x775E827E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=136.0.7103.114)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x010CFC03+61635]\nE       \tGetHandleVerifier [0x010CFC44+61700]\nE       \t(No symbol) [0x00EF05D3]\nE       \t(No symbol) [0x00ECFBC9]\nE       \t(No symbol) [0x00F63CBE]\nE       \t(No symbol) [0x00F7DF19]\nE       \t(No symbol) [0x00F5D096]\nE       \t(No symbol) [0x00F2C840]\nE       \t(No symbol) [0x00F2D6A4]\nE       \tGetHandleVerifier [0x01354523+2701795]\nE       \tGetHandleVerifier [0x0134FCA6+2683238]\nE       \tGetHandleVerifier [0x0136A9EE+2793134]\nE       \tGetHandleVerifier [0x010E68C5+155013]\nE       \tGetHandleVerifier [0x010ECFAD+181357]\nE       \tGetHandleVerifier [0x010D7458+92440]\nE       \tGetHandleVerifier [0x010D7600+92864]\nE       \tGetHandleVerifier [0x010C1FF0+5296]\nE       \tBaseThreadInitThunk [0x76E4FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x775E82AE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x775E827E+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"config","time":{"start":1748369816471,"stop":1748369816471,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"browser","time":{"start":1748370175560,"stop":1748370181876,"duration":6316},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"browser::0","time":{"start":1748370186178,"stop":1748370188250,"duration":2072},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"92da0b7b65f9dd7a.json","parameterValues":[]}