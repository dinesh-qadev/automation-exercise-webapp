{"uid":"55b5a7c1635278ee","name":"Submit Contact Us Form","fullName":"testCases.test_006_contact_us_form#test_006_contact_us_form","historyId":"d85eb3c24f41a3fd43349fedfc6e686d","time":{"start":1748624907060,"stop":1748624919071,"duration":12011},"description":"Verify user can submit contact form and success message is displayed.","descriptionHtml":"<p>Verify user can submit contact form and success message is displayed.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55d99be2a71a <unknown>\n#1 0x55d99b8cd0a0 <unknown>\n#2 0x55d99b91e9b0 <unknown>\n#3 0x55d99b91eba1 <unknown>\n#4 0x55d99b96cea4 <unknown>\n#5 0x55d99b9443cd <unknown>\n#6 0x55d99b96a2a0 <unknown>\n#7 0x55d99b944173 <unknown>\n#8 0x55d99b910d4b <unknown>\n#9 0x55d99b9119b1 <unknown>\n#10 0x55d99bdef8cb <unknown>\n#11 0x55d99bdf37ca <unknown>\n#12 0x55d99bdd7622 <unknown>\n#13 0x55d99bdf4354 <unknown>\n#14 0x55d99bdbc45f <unknown>\n#15 0x55d99be184f8 <unknown>\n#16 0x55d99be186d6 <unknown>\n#17 0x55d99be29586 <unknown>\n#18 0x7fb1f6c9caa4 <unknown>\n#19 0x7fb1f6d29c3c <unknown>","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"05c63d774f8392309c4e6aeb32b7ca56\")>\n\n    @allure.feature(\"Contact Us\")\n    @allure.severity(allure.severity_level.MINOR)\n    @allure.title(\"Submit Contact Us Form\")\n    @allure.description(\"Verify user can submit contact form and success message is displayed.\")\n    def test_006_contact_us_form(browser):\n        # Initialize page objects\n        home_page = HomePage(browser)\n        contact_us_page = ContactUsPage(browser)\n    \n        #Initialize TestData\n        messeges = load_test_data(\"contact_us.json\")\n        required_testdata = messeges[\"contact_form\"]\n    \n        # Step 1: Verify home page is displayed by checking if 'Home' link is active\n        assert home_page.is_home_page_displayed(), \"Home page is not visible or 'Home' link is not active\"\n    \n        # Step 2: Click on 'Contact Us' button\n        home_page.click_contact_us()\n    \n        # Step 3: Verify 'GET IN TOUCH' header is visible on the Contact Us page\n        assert contact_us_page.is_get_in_touch_header_visible(), \"'GET IN TOUCH' header is not visible\"\n    \n        # Step 4: Enter name, email, subject, and message\n        name = required_testdata[\"name\"]\n        email = required_testdata[\"email\"]\n        subject = required_testdata[\"subject\"]\n        message = required_testdata[\"message\"]\n        contact_us_page.fill_contact_form(name, email, subject, message)\n    \n        # Step 5: Upload file\n        file_path = get_resource_file_path(\"contact_us_upload_01.jpeg\")\n        # Provide the correct path to the file\n        contact_us_page.upload_file(file_path)\n    \n        # Step 6: Click 'Submit' button\n        contact_us_page.click_submit_button()\n    \n        # Step 7: Click 'OK' button on success pop-up\n>       contact_us_page.click_ok_button()\n\ntestCases/test_006_contact_us_form.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageObjects/contact_page.py:41: in click_ok_button\n    self.click(self.OK_BUTTON)\npageObjects/base_page.py:43: in click\n    element = self.wait.until(EC.element_to_be_clickable(target))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"05c63d774f8392309c4e6aeb32b7ca56\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f40e8d8c900>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55d99be2a71a <unknown>\nE       #1 0x55d99b8cd0a0 <unknown>\nE       #2 0x55d99b91e9b0 <unknown>\nE       #3 0x55d99b91eba1 <unknown>\nE       #4 0x55d99b96cea4 <unknown>\nE       #5 0x55d99b9443cd <unknown>\nE       #6 0x55d99b96a2a0 <unknown>\nE       #7 0x55d99b944173 <unknown>\nE       #8 0x55d99b910d4b <unknown>\nE       #9 0x55d99b9119b1 <unknown>\nE       #10 0x55d99bdef8cb <unknown>\nE       #11 0x55d99bdf37ca <unknown>\nE       #12 0x55d99bdd7622 <unknown>\nE       #13 0x55d99bdf4354 <unknown>\nE       #14 0x55d99bdbc45f <unknown>\nE       #15 0x55d99be184f8 <unknown>\nE       #16 0x55d99be186d6 <unknown>\nE       #17 0x55d99be29586 <unknown>\nE       #18 0x7fb1f6c9caa4 <unknown>\nE       #19 0x7fb1f6d29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"config","time":{"start":1748624872399,"stop":1748624872399,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"browser","time":{"start":1748624903814,"stop":1748624907060,"duration":3246},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Verify user can submit contact form and success message is displayed.","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55d99be2a71a <unknown>\n#1 0x55d99b8cd0a0 <unknown>\n#2 0x55d99b91e9b0 <unknown>\n#3 0x55d99b91eba1 <unknown>\n#4 0x55d99b96cea4 <unknown>\n#5 0x55d99b9443cd <unknown>\n#6 0x55d99b96a2a0 <unknown>\n#7 0x55d99b944173 <unknown>\n#8 0x55d99b910d4b <unknown>\n#9 0x55d99b9119b1 <unknown>\n#10 0x55d99bdef8cb <unknown>\n#11 0x55d99bdf37ca <unknown>\n#12 0x55d99bdd7622 <unknown>\n#13 0x55d99bdf4354 <unknown>\n#14 0x55d99bdbc45f <unknown>\n#15 0x55d99be184f8 <unknown>\n#16 0x55d99be186d6 <unknown>\n#17 0x55d99be29586 <unknown>\n#18 0x7fb1f6c9caa4 <unknown>\n#19 0x7fb1f6d29c3c <unknown>","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"05c63d774f8392309c4e6aeb32b7ca56\")>\n\n    @allure.feature(\"Contact Us\")\n    @allure.severity(allure.severity_level.MINOR)\n    @allure.title(\"Submit Contact Us Form\")\n    @allure.description(\"Verify user can submit contact form and success message is displayed.\")\n    def test_006_contact_us_form(browser):\n        # Initialize page objects\n        home_page = HomePage(browser)\n        contact_us_page = ContactUsPage(browser)\n    \n        #Initialize TestData\n        messeges = load_test_data(\"contact_us.json\")\n        required_testdata = messeges[\"contact_form\"]\n    \n        # Step 1: Verify home page is displayed by checking if 'Home' link is active\n        assert home_page.is_home_page_displayed(), \"Home page is not visible or 'Home' link is not active\"\n    \n        # Step 2: Click on 'Contact Us' button\n        home_page.click_contact_us()\n    \n        # Step 3: Verify 'GET IN TOUCH' header is visible on the Contact Us page\n        assert contact_us_page.is_get_in_touch_header_visible(), \"'GET IN TOUCH' header is not visible\"\n    \n        # Step 4: Enter name, email, subject, and message\n        name = required_testdata[\"name\"]\n        email = required_testdata[\"email\"]\n        subject = required_testdata[\"subject\"]\n        message = required_testdata[\"message\"]\n        contact_us_page.fill_contact_form(name, email, subject, message)\n    \n        # Step 5: Upload file\n        file_path = get_resource_file_path(\"contact_us_upload_01.jpeg\")\n        # Provide the correct path to the file\n        contact_us_page.upload_file(file_path)\n    \n        # Step 6: Click 'Submit' button\n        contact_us_page.click_submit_button()\n    \n        # Step 7: Click 'OK' button on success pop-up\n>       contact_us_page.click_ok_button()\n\ntestCases/test_006_contact_us_form.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageObjects/contact_page.py:41: in click_ok_button\n    self.click(self.OK_BUTTON)\npageObjects/base_page.py:43: in click\n    element = self.wait.until(EC.element_to_be_clickable(target))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"05c63d774f8392309c4e6aeb32b7ca56\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f40e8d8c900>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55d99be2a71a <unknown>\nE       #1 0x55d99b8cd0a0 <unknown>\nE       #2 0x55d99b91e9b0 <unknown>\nE       #3 0x55d99b91eba1 <unknown>\nE       #4 0x55d99b96cea4 <unknown>\nE       #5 0x55d99b9443cd <unknown>\nE       #6 0x55d99b96a2a0 <unknown>\nE       #7 0x55d99b944173 <unknown>\nE       #8 0x55d99b910d4b <unknown>\nE       #9 0x55d99b9119b1 <unknown>\nE       #10 0x55d99bdef8cb <unknown>\nE       #11 0x55d99bdf37ca <unknown>\nE       #12 0x55d99bdd7622 <unknown>\nE       #13 0x55d99bdf4354 <unknown>\nE       #14 0x55d99bdbc45f <unknown>\nE       #15 0x55d99be184f8 <unknown>\nE       #16 0x55d99be186d6 <unknown>\nE       #17 0x55d99be29586 <unknown>\nE       #18 0x7fb1f6c9caa4 <unknown>\nE       #19 0x7fb1f6d29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","steps":[],"attachments":[{"uid":"4f383ffaf87be3c2","name":"screenshot_on_failure","source":"4f383ffaf87be3c2.png","type":"image/png","size":118126},{"uid":"5ce6a7b81869deab","name":"log","source":"5ce6a7b81869deab.txt","type":"text/plain","size":1840},{"uid":"5d00694e9d39d33c","name":"stdout","source":"5d00694e9d39d33c.txt","type":"text/plain","size":5},{"uid":"5798725b19b7748b","name":"stderr","source":"5798725b19b7748b.txt","type":"text/plain","size":3504}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"browser::0","time":{"start":1748624919613,"stop":1748624919745,"duration":132},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"minor"},{"name":"feature","value":"Contact Us"},{"name":"parentSuite","value":"testCases"},{"name":"suite","value":"test_006_contact_us_form"},{"name":"host","value":"pkrvmf6wy0o8zjz"},{"name":"thread","value":"3755-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCases.test_006_contact_us_form"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"minor","retries":[{"uid":"7c68c41da418f05","status":"passed","time":{"start":1748369928840,"stop":1748369931538,"duration":2698}},{"uid":"6905b8cd8d878b79","status":"passed","time":{"start":1748366269284,"stop":1748366273759,"duration":4475}}],"categories":[{"name":"Test Defects","messageRegex":".*(NoSuchElementException|TimeoutException).*","matchedStatuses":["broken"]}],"tags":[]},"source":"55b5a7c1635278ee.json","parameterValues":[]}