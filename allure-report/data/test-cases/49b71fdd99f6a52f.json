{"uid":"49b71fdd99f6a52f","name":"Search Products and Verify Cart After Login","fullName":"testCases.test_020_search_products_and_verify_cart_after_login#test_search_products_and_verify_cart_after_login","historyId":"d9f3acb1e8b5f7d51dcda027c0949608","time":{"start":1748662304389,"stop":1748662311297,"duration":6908},"description":"Verify searched products are added to cart and persist after user login.","descriptionHtml":"<p>Verify searched products are added to cart and persist after user login.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=136.0.7103.92); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x55f5e5d9271a <unknown>\n#1 0x55f5e58350a0 <unknown>\n#2 0x55f5e58486eb <unknown>\n#3 0x55f5e58474a2 <unknown>\n#4 0x55f5e583c5f9 <unknown>\n#5 0x55f5e583c725 <unknown>\n#6 0x55f5e583a84f <unknown>\n#7 0x55f5e583e857 <unknown>\n#8 0x55f5e58d32de <unknown>\n#9 0x55f5e58ac3a2 <unknown>\n#10 0x55f5e58d22a0 <unknown>\n#11 0x55f5e58ac173 <unknown>\n#12 0x55f5e5878d4b <unknown>\n#13 0x55f5e58799b1 <unknown>\n#14 0x55f5e5d578cb <unknown>\n#15 0x55f5e5d5b7ca <unknown>\n#16 0x55f5e5d3f622 <unknown>\n#17 0x55f5e5d5c354 <unknown>\n#18 0x55f5e5d2445f <unknown>\n#19 0x55f5e5d804f8 <unknown>\n#20 0x55f5e5d806d6 <unknown>\n#21 0x55f5e5d91586 <unknown>\n#22 0x7fc096e9caa4 <unknown>\n#23 0x7fc096f29c3c <unknown>","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"33a87c90a9f514882fe6cc9ae75f5e59\")>\n\n    @allure.feature(\"Cart\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title(\"Search Products and Verify Cart After Login\")\n    @allure.description(\"Verify searched products are added to cart and persist after user login.\")\n    def test_search_products_and_verify_cart_after_login(browser):\n        home = HomePage(browser)\n        products = ProductsPage(browser)\n        cart = CartPage(browser)\n        signup_login = SignupLoginPage(browser)\n    \n        # 3. Click on 'Products' button\n        home.click_products()\n    \n        # 4. Verify user is navigated to ALL PRODUCTS page successfully\n        assert products.is_all_products_page_displayed(), \"All Products page not visible\"\n    \n        # 5. Enter product name in search input and click search button\n        product_info = load_test_data(\"products.json\")  # Test Data initialized\n        search_data = product_info[\"search\"]\n    \n        product_name = search_data[\"product_search\"]  # Fetched product name from json\n        products.enter_search_text(product_name)\n        products.click_search_button()\n    \n        # 6. Verify 'SEARCHED PRODUCTS' is visible\n        assert products.is_searched_products_section_visible(), \"Searched Products section not visible\"\n    \n        # 7. Verify all the products related to search are visible\n        assert products.are_search_results_visible(product_name), f\"Search results for '{product_name}' are not displayed correctly\"\n    \n        # 8. Add those products to cart: for faster test we are only adding two products to cart\n        product_1_name, product_1_price = products.hover_and_add_to_cart_and_get_price(1) # over and add first product to cart, capture price\n    \n        print(product_1_name)\n        products.click_continue_shopping()\n        product_2_name, product_2_price = products.hover_and_add_to_cart_and_get_price(2) # Hover and add second product to cart, capture price\n    \n        added_products = [product_1_name, product_2_name]\n        # 9. Click 'Cart' button and verify that products are visible in cart\n        products.click_view_cart()\n    \n        assert cart.are_products_in_cart(added_products), \"First product not found in cart\"  # Verify Product-1 is on cart\n        #assert cart.are_products_in_cart(product_2_name), \"Second product not found in cart\"  # Verify Product-2 is on cart\n    \n        assert cart.verify_product_details(1, product_1_price), \"Product 1 price/quantity/total is incorrect\"  # Verify Product-1 details is correct on cart\n        assert cart.verify_product_details(2, product_2_price), \"Product 2 price/quantity/total is incorrect\"  # Verify Product-1 details is correct on cart\n    \n        # 10. Click 'Signup / Login' button and submit login details\n        home.click_signup_login()\n        user_info = load_test_data(\"users.json\")  # Test data loaded from json file\n        correct_credential = user_info[\"valid_user\"]\n        signup_login.login_user(\n            email=correct_credential[\"email\"],\n            password=correct_credential[\"password\"])\n    \n        # 11. Again, go to Cart page\n>       home.click_cart_button()\n\ntestCases/test_020_search_products_and_verify_cart_after_login.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageObjects/home_page.py:100: in click_cart_button\n    self.click(self.CART_BUTTON)\npageObjects/base_page.py:43: in click\n    element = self.wait.until(EC.element_to_be_clickable(target))\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:137: in until\n    value = method(self._driver)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:634: in _predicate\n    element = visibility_of(target)(driver)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:260: in _predicate\n    return _element_if_visible(element)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible\n    return element if element.is_displayed() == visibility else False\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed\n    return self.parent.execute_script(f\"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);\", self)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f486fbe67d0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#21 0x55f5e5d91586 \\\\u003Cunknown>\\\\n#22 0x7fc096e9caa4 \\\\u003Cunknown>\\\\n#23 0x7fc096f29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=136.0.7103.92); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x55f5e5d9271a <unknown>\nE       #1 0x55f5e58350a0 <unknown>\nE       #2 0x55f5e58486eb <unknown>\nE       #3 0x55f5e58474a2 <unknown>\nE       #4 0x55f5e583c5f9 <unknown>\nE       #5 0x55f5e583c725 <unknown>\nE       #6 0x55f5e583a84f <unknown>\nE       #7 0x55f5e583e857 <unknown>\nE       #8 0x55f5e58d32de <unknown>\nE       #9 0x55f5e58ac3a2 <unknown>\nE       #10 0x55f5e58d22a0 <unknown>\nE       #11 0x55f5e58ac173 <unknown>\nE       #12 0x55f5e5878d4b <unknown>\nE       #13 0x55f5e58799b1 <unknown>\nE       #14 0x55f5e5d578cb <unknown>\nE       #15 0x55f5e5d5b7ca <unknown>\nE       #16 0x55f5e5d3f622 <unknown>\nE       #17 0x55f5e5d5c354 <unknown>\nE       #18 0x55f5e5d2445f <unknown>\nE       #19 0x55f5e5d804f8 <unknown>\nE       #20 0x55f5e5d806d6 <unknown>\nE       #21 0x55f5e5d91586 <unknown>\nE       #22 0x7fc096e9caa4 <unknown>\nE       #23 0x7fc096f29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: StaleElementReferenceException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"config","time":{"start":1748662190241,"stop":1748662190241,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"browser","time":{"start":1748662302160,"stop":1748662304388,"duration":2228},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Verify searched products are added to cart and persist after user login.","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=136.0.7103.92); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x55f5e5d9271a <unknown>\n#1 0x55f5e58350a0 <unknown>\n#2 0x55f5e58486eb <unknown>\n#3 0x55f5e58474a2 <unknown>\n#4 0x55f5e583c5f9 <unknown>\n#5 0x55f5e583c725 <unknown>\n#6 0x55f5e583a84f <unknown>\n#7 0x55f5e583e857 <unknown>\n#8 0x55f5e58d32de <unknown>\n#9 0x55f5e58ac3a2 <unknown>\n#10 0x55f5e58d22a0 <unknown>\n#11 0x55f5e58ac173 <unknown>\n#12 0x55f5e5878d4b <unknown>\n#13 0x55f5e58799b1 <unknown>\n#14 0x55f5e5d578cb <unknown>\n#15 0x55f5e5d5b7ca <unknown>\n#16 0x55f5e5d3f622 <unknown>\n#17 0x55f5e5d5c354 <unknown>\n#18 0x55f5e5d2445f <unknown>\n#19 0x55f5e5d804f8 <unknown>\n#20 0x55f5e5d806d6 <unknown>\n#21 0x55f5e5d91586 <unknown>\n#22 0x7fc096e9caa4 <unknown>\n#23 0x7fc096f29c3c <unknown>","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"33a87c90a9f514882fe6cc9ae75f5e59\")>\n\n    @allure.feature(\"Cart\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title(\"Search Products and Verify Cart After Login\")\n    @allure.description(\"Verify searched products are added to cart and persist after user login.\")\n    def test_search_products_and_verify_cart_after_login(browser):\n        home = HomePage(browser)\n        products = ProductsPage(browser)\n        cart = CartPage(browser)\n        signup_login = SignupLoginPage(browser)\n    \n        # 3. Click on 'Products' button\n        home.click_products()\n    \n        # 4. Verify user is navigated to ALL PRODUCTS page successfully\n        assert products.is_all_products_page_displayed(), \"All Products page not visible\"\n    \n        # 5. Enter product name in search input and click search button\n        product_info = load_test_data(\"products.json\")  # Test Data initialized\n        search_data = product_info[\"search\"]\n    \n        product_name = search_data[\"product_search\"]  # Fetched product name from json\n        products.enter_search_text(product_name)\n        products.click_search_button()\n    \n        # 6. Verify 'SEARCHED PRODUCTS' is visible\n        assert products.is_searched_products_section_visible(), \"Searched Products section not visible\"\n    \n        # 7. Verify all the products related to search are visible\n        assert products.are_search_results_visible(product_name), f\"Search results for '{product_name}' are not displayed correctly\"\n    \n        # 8. Add those products to cart: for faster test we are only adding two products to cart\n        product_1_name, product_1_price = products.hover_and_add_to_cart_and_get_price(1) # over and add first product to cart, capture price\n    \n        print(product_1_name)\n        products.click_continue_shopping()\n        product_2_name, product_2_price = products.hover_and_add_to_cart_and_get_price(2) # Hover and add second product to cart, capture price\n    \n        added_products = [product_1_name, product_2_name]\n        # 9. Click 'Cart' button and verify that products are visible in cart\n        products.click_view_cart()\n    \n        assert cart.are_products_in_cart(added_products), \"First product not found in cart\"  # Verify Product-1 is on cart\n        #assert cart.are_products_in_cart(product_2_name), \"Second product not found in cart\"  # Verify Product-2 is on cart\n    \n        assert cart.verify_product_details(1, product_1_price), \"Product 1 price/quantity/total is incorrect\"  # Verify Product-1 details is correct on cart\n        assert cart.verify_product_details(2, product_2_price), \"Product 2 price/quantity/total is incorrect\"  # Verify Product-1 details is correct on cart\n    \n        # 10. Click 'Signup / Login' button and submit login details\n        home.click_signup_login()\n        user_info = load_test_data(\"users.json\")  # Test data loaded from json file\n        correct_credential = user_info[\"valid_user\"]\n        signup_login.login_user(\n            email=correct_credential[\"email\"],\n            password=correct_credential[\"password\"])\n    \n        # 11. Again, go to Cart page\n>       home.click_cart_button()\n\ntestCases/test_020_search_products_and_verify_cart_after_login.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageObjects/home_page.py:100: in click_cart_button\n    self.click(self.CART_BUTTON)\npageObjects/base_page.py:43: in click\n    element = self.wait.until(EC.element_to_be_clickable(target))\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:137: in until\n    value = method(self._driver)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:634: in _predicate\n    element = visibility_of(target)(driver)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:260: in _predicate\n    return _element_if_visible(element)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible\n    return element if element.is_displayed() == visibility else False\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed\n    return self.parent.execute_script(f\"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);\", self)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f486fbe67d0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#21 0x55f5e5d91586 \\\\u003Cunknown>\\\\n#22 0x7fc096e9caa4 \\\\u003Cunknown>\\\\n#23 0x7fc096f29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=136.0.7103.92); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x55f5e5d9271a <unknown>\nE       #1 0x55f5e58350a0 <unknown>\nE       #2 0x55f5e58486eb <unknown>\nE       #3 0x55f5e58474a2 <unknown>\nE       #4 0x55f5e583c5f9 <unknown>\nE       #5 0x55f5e583c725 <unknown>\nE       #6 0x55f5e583a84f <unknown>\nE       #7 0x55f5e583e857 <unknown>\nE       #8 0x55f5e58d32de <unknown>\nE       #9 0x55f5e58ac3a2 <unknown>\nE       #10 0x55f5e58d22a0 <unknown>\nE       #11 0x55f5e58ac173 <unknown>\nE       #12 0x55f5e5878d4b <unknown>\nE       #13 0x55f5e58799b1 <unknown>\nE       #14 0x55f5e5d578cb <unknown>\nE       #15 0x55f5e5d5b7ca <unknown>\nE       #16 0x55f5e5d3f622 <unknown>\nE       #17 0x55f5e5d5c354 <unknown>\nE       #18 0x55f5e5d2445f <unknown>\nE       #19 0x55f5e5d804f8 <unknown>\nE       #20 0x55f5e5d806d6 <unknown>\nE       #21 0x55f5e5d91586 <unknown>\nE       #22 0x7fc096e9caa4 <unknown>\nE       #23 0x7fc096f29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: StaleElementReferenceException","steps":[],"attachments":[{"uid":"3780ae6471e0f819","name":"screenshot_on_failure","source":"3780ae6471e0f819.png","type":"image/png","size":937557},{"uid":"dd5ddea9c7dfc571","name":"log","source":"dd5ddea9c7dfc571.txt","type":"text/plain","size":4652},{"uid":"87d2b241e0313e9c","name":"stdout","source":"87d2b241e0313e9c.txt","type":"text/plain","size":267},{"uid":"f713636775d3efc3","name":"stderr","source":"f713636775d3efc3.txt","type":"text/plain","size":8786}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"browser::0","time":{"start":1748662311824,"stop":1748662312037,"duration":213},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Cart"},{"name":"severity","value":"critical"},{"name":"parentSuite","value":"testCases"},{"name":"suite","value":"test_020_search_products_and_verify_cart_after_login"},{"name":"host","value":"pkrvmf6wy0o8zjz"},{"name":"thread","value":"3756-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCases.test_020_search_products_and_verify_cart_after_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[{"uid":"3f0f35c40cb2f0c3","status":"failed","statusDetails":"AssertionError: Product 1 price/quantity/total is incorrect\nassert False\n +  where False = verify_product_details(2, 'Rs. 400')\n +    where verify_product_details = <pageObjects.cart_page.CartPage object at 0x0000015F5231D210>.verify_product_details","time":{"start":1748660809245,"stop":1748660821515,"duration":12270}},{"uid":"481b8b6cc1518c3e","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1748366567183,"stop":1748366585118,"duration":17935}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"26670f291c68f99f","status":"failed","statusDetails":"AssertionError: Product 1 price/quantity/total is incorrect\nassert False\n +  where False = verify_product_details(2, 'Rs. 400')\n +    where verify_product_details = <pageObjects.cart_page.CartPage object at 0x7f4434489250>.verify_product_details","time":{"start":1748661402728,"stop":1748661409458,"duration":6730}}]},"tags":[]},"source":"49b71fdd99f6a52f.json","parameterValues":[]}