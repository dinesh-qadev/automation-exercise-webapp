{"uid":"e2fafaec2628e51d","name":"Search Products and Verify Cart After Login","fullName":"testCases.test_020_search_products_and_verify_cart_after_login#test_search_products_and_verify_cart_after_login","historyId":"d9f3acb1e8b5f7d51dcda027c0949608","time":{"start":1748283476406,"stop":1748283488600,"duration":12194},"description":"Verify searched products are added to cart and persist after user login.","descriptionHtml":"<p>Verify searched products are added to cart and persist after user login.</p>\n","status":"failed","statusMessage":"AssertionError: Product 1 price/quantity/total is incorrect\nassert False\n +  where False = verify_product_details(2, 'Rs. 400')\n +    where verify_product_details = <pageObjects.cart_page.CartPage object at 0x000002C81EF6BFD0>.verify_product_details","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"923e52a9b45bf1faf7eb7de6f20a58d8\")>\n\n    @allure.feature(\"Cart\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title(\"Search Products and Verify Cart After Login\")\n    @allure.description(\"Verify searched products are added to cart and persist after user login.\")\n    def test_search_products_and_verify_cart_after_login(browser):\n        home = HomePage(browser)\n        products = ProductsPage(browser)\n        cart = CartPage(browser)\n        signup_login = SignupLoginPage(browser)\n    \n        # 3. Click on 'Products' button\n        home.click_products()\n    \n        # 4. Verify user is navigated to ALL PRODUCTS page successfully\n        assert products.is_all_products_page_displayed(), \"All Products page not visible\"\n    \n        # 5. Enter product name in search input and click search button\n        product_info = load_test_data(\"products.json\")  # Test Data initialized\n        search_data = product_info[\"search\"]\n    \n        product_name = search_data[\"product_search\"]  # Fetched product name from json\n        products.enter_search_text(product_name)\n        products.click_search_button()\n    \n        # 6. Verify 'SEARCHED PRODUCTS' is visible\n        assert products.is_searched_products_section_visible(), \"Searched Products section not visible\"\n    \n        # 7. Verify all the products related to search are visible\n        assert products.are_search_results_visible(product_name), f\"Search results for '{product_name}' are not displayed correctly\"\n    \n        # 8. Add those products to cart: for faster test we are only adding two products to cart\n        product_1_name, product_1_price = products.hover_and_add_to_cart_and_get_price(1) # over and add first product to cart, capture price\n    \n        print(product_1_name)\n        products.click_continue_shopping()\n        product_2_name, product_2_price = products.hover_and_add_to_cart_and_get_price(2) # Hover and add second product to cart, capture price\n    \n        added_products = [product_1_name, product_2_name]\n        # 9. Click 'Cart' button and verify that products are visible in cart\n        products.click_view_cart()\n    \n        assert cart.are_products_in_cart(added_products), \"First product not found in cart\"  # Verify Product-1 is on cart\n        #assert cart.are_products_in_cart(product_2_name), \"Second product not found in cart\"  # Verify Product-2 is on cart\n    \n        assert cart.verify_product_details(1, product_1_price), \"Product 1 price/quantity/total is incorrect\"  # Verify Product-1 details is correct on cart\n        assert cart.verify_product_details(2, product_2_price), \"Product 2 price/quantity/total is incorrect\"  # Verify Product-1 details is correct on cart\n    \n        # 10. Click 'Signup / Login' button and submit login details\n        home.click_signup_login()\n        user_info = load_test_data(\"users.json\")  # Test data loaded from json file\n        correct_credential = user_info[\"valid_user\"]\n        signup_login.login_user(\n            email=correct_credential[\"email\"],\n            password=correct_credential[\"password\"])\n    \n        # 11. Again, go to Cart page\n        home.click_cart_button()\n    \n        # 12. Verify that those products are visible in cart after login as well\n        assert cart.are_products_in_cart(added_products), \"Products are not found in cart\"  # Verify Product is on cart\n        #assert cart.are_products_in_cart(product_2_name), \"Second product not found in cart\"  # Verify Product-2 is on cart\n    \n>       assert cart.verify_product_details(2,\n                                           product_1_price), \"Product 1 price/quantity/total is incorrect\"  # Verify Product-1 details is correct on cart\nE       AssertionError: Product 1 price/quantity/total is incorrect\nE       assert False\nE        +  where False = verify_product_details(2, 'Rs. 400')\nE        +    where verify_product_details = <pageObjects.cart_page.CartPage object at 0x000002C81EF6BFD0>.verify_product_details\n\ntestCases\\test_020_search_products_and_verify_cart_after_login.py:71: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"config","time":{"start":1748283096928,"stop":1748283096928,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0},{"name":"browser","time":{"start":1748283466541,"stop":1748283476404,"duration":9863},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0}],"testStage":{"description":"Verify searched products are added to cart and persist after user login.","status":"failed","statusMessage":"AssertionError: Product 1 price/quantity/total is incorrect\nassert False\n +  where False = verify_product_details(2, 'Rs. 400')\n +    where verify_product_details = <pageObjects.cart_page.CartPage object at 0x000002C81EF6BFD0>.verify_product_details","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"923e52a9b45bf1faf7eb7de6f20a58d8\")>\n\n    @allure.feature(\"Cart\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title(\"Search Products and Verify Cart After Login\")\n    @allure.description(\"Verify searched products are added to cart and persist after user login.\")\n    def test_search_products_and_verify_cart_after_login(browser):\n        home = HomePage(browser)\n        products = ProductsPage(browser)\n        cart = CartPage(browser)\n        signup_login = SignupLoginPage(browser)\n    \n        # 3. Click on 'Products' button\n        home.click_products()\n    \n        # 4. Verify user is navigated to ALL PRODUCTS page successfully\n        assert products.is_all_products_page_displayed(), \"All Products page not visible\"\n    \n        # 5. Enter product name in search input and click search button\n        product_info = load_test_data(\"products.json\")  # Test Data initialized\n        search_data = product_info[\"search\"]\n    \n        product_name = search_data[\"product_search\"]  # Fetched product name from json\n        products.enter_search_text(product_name)\n        products.click_search_button()\n    \n        # 6. Verify 'SEARCHED PRODUCTS' is visible\n        assert products.is_searched_products_section_visible(), \"Searched Products section not visible\"\n    \n        # 7. Verify all the products related to search are visible\n        assert products.are_search_results_visible(product_name), f\"Search results for '{product_name}' are not displayed correctly\"\n    \n        # 8. Add those products to cart: for faster test we are only adding two products to cart\n        product_1_name, product_1_price = products.hover_and_add_to_cart_and_get_price(1) # over and add first product to cart, capture price\n    \n        print(product_1_name)\n        products.click_continue_shopping()\n        product_2_name, product_2_price = products.hover_and_add_to_cart_and_get_price(2) # Hover and add second product to cart, capture price\n    \n        added_products = [product_1_name, product_2_name]\n        # 9. Click 'Cart' button and verify that products are visible in cart\n        products.click_view_cart()\n    \n        assert cart.are_products_in_cart(added_products), \"First product not found in cart\"  # Verify Product-1 is on cart\n        #assert cart.are_products_in_cart(product_2_name), \"Second product not found in cart\"  # Verify Product-2 is on cart\n    \n        assert cart.verify_product_details(1, product_1_price), \"Product 1 price/quantity/total is incorrect\"  # Verify Product-1 details is correct on cart\n        assert cart.verify_product_details(2, product_2_price), \"Product 2 price/quantity/total is incorrect\"  # Verify Product-1 details is correct on cart\n    \n        # 10. Click 'Signup / Login' button and submit login details\n        home.click_signup_login()\n        user_info = load_test_data(\"users.json\")  # Test data loaded from json file\n        correct_credential = user_info[\"valid_user\"]\n        signup_login.login_user(\n            email=correct_credential[\"email\"],\n            password=correct_credential[\"password\"])\n    \n        # 11. Again, go to Cart page\n        home.click_cart_button()\n    \n        # 12. Verify that those products are visible in cart after login as well\n        assert cart.are_products_in_cart(added_products), \"Products are not found in cart\"  # Verify Product is on cart\n        #assert cart.are_products_in_cart(product_2_name), \"Second product not found in cart\"  # Verify Product-2 is on cart\n    \n>       assert cart.verify_product_details(2,\n                                           product_1_price), \"Product 1 price/quantity/total is incorrect\"  # Verify Product-1 details is correct on cart\nE       AssertionError: Product 1 price/quantity/total is incorrect\nE       assert False\nE        +  where False = verify_product_details(2, 'Rs. 400')\nE        +    where verify_product_details = <pageObjects.cart_page.CartPage object at 0x000002C81EF6BFD0>.verify_product_details\n\ntestCases\\test_020_search_products_and_verify_cart_after_login.py:71: AssertionError","steps":[],"attachments":[{"uid":"d6ee3c465e54deac","name":"screenshot_on_failure","source":"d6ee3c465e54deac.png","type":"image/png","size":58243},{"uid":"eb4dd09623939749","name":"log","source":"eb4dd09623939749.txt","type":"text/plain","size":4864},{"uid":"f149906f76b2130","name":"stdout","source":"f149906f76b2130.txt","type":"text/plain","size":297},{"uid":"8a7a3c2398e7d937","name":"stderr","source":"8a7a3c2398e7d937.txt","type":"text/plain","size":8470}],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentStep":false,"stepsCount":0,"attachmentsCount":4},"afterStages":[{"name":"browser::0","time":{"start":1748283488916,"stop":1748283492401,"duration":3485},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentStep":false,"stepsCount":0,"attachmentsCount":0}],"labels":[{"name":"feature","value":"Cart"},{"name":"severity","value":"critical"},{"name":"parentSuite","value":"testCases"},{"name":"suite","value":"test_020_search_products_and_verify_cart_after_login"},{"name":"host","value":"DESKTOP-6JB123S"},{"name":"thread","value":"5056-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCases.test_020_search_products_and_verify_cart_after_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[{"uid":"b89338bb7fa42b98","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: chrome=136.0.7103.114)\nStacktrace:\n\tGetHandleVerifier [0x009FFC03+61635]\n\tGetHandleVerifier [0x009FFC44+61700]\n\t(No symbol) [0x008205D3]\n\t(No symbol) [0x0081DBE0]\n\t(No symbol) [0x008113A8]\n\t(No symbol) [0x00812CF0]\n\t(No symbol) [0x00811638]\n\t(No symbol) [0x00811193]\n\t(No symbol) [0x00810EA1]\n\t(No symbol) [0x0080EE80]\n\t(No symbol) [0x0080F81B]\n\t(No symbol) [0x00823FFE]\n\t(No symbol) [0x008AF217]\n\t(No symbol) [0x0088D29C]\n\t(No symbol) [0x008AE61B]\n\t(No symbol) [0x0088D096]\n\t(No symbol) [0x0085C840]\n\t(No symbol) [0x0085D6A4]\n\tGetHandleVerifier [0x00C84523+2701795]\n\tGetHandleVerifier [0x00C7FCA6+2683238]\n\tGetHandleVerifier [0x00C9A9EE+2793134]\n\tGetHandleVerifier [0x00A168C5+155013]\n\tGetHandleVerifier [0x00A1CFAD+181357]\n\tGetHandleVerifier [0x00A07458+92440]\n\tGetHandleVerifier [0x00A07600+92864]\n\tGetHandleVerifier [0x009F1FF0+5296]\n\tBaseThreadInitThunk [0x76E4FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x775E82AE+286]\n\tRtlGetAppContainerNamedObjectPath [0x775E827E+238]","time":{"start":1748282626483,"stop":1748282626483,"duration":0}},{"uid":"42ea2eabb9480cb6","status":"failed","statusDetails":"AssertionError: Product 1 price/quantity/total is incorrect\nassert False\n +  where False = verify_product_details(2, 'Rs. 400')\n +    where verify_product_details = <pageObjects.cart_page.CartPage object at 0x0000021061B38B90>.verify_product_details","time":{"start":1748022853478,"stop":1748022866241,"duration":12763}}],"categories":[{"name":"Product Defects","messageRegex":".*AssertionError.*","matchedStatuses":["failed"]}],"tags":[]},"source":"e2fafaec2628e51d.json","parameterValues":[]}