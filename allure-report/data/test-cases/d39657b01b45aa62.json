{"uid":"d39657b01b45aa62","name":"Search Products and Verify Cart After Login","fullName":"testCases.test_020_search_products_and_verify_cart_after_login#test_search_products_and_verify_cart_after_login","historyId":"d9f3acb1e8b5f7d51dcda027c0949608","time":{"start":1748710618985,"stop":1748710632281,"duration":13296},"description":"Verify searched products are added to cart and persist after user login.","descriptionHtml":"<p>Verify searched products are added to cart and persist after user login.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=136.0.7103.114); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00D9FC03+61635]\n\tGetHandleVerifier [0x00D9FC44+61700]\n\t(No symbol) [0x00BC05D3]\n\t(No symbol) [0x00BD2061]\n\t(No symbol) [0x00BD1140]\n\t(No symbol) [0x00BC7880]\n\t(No symbol) [0x00BC795C]\n\t(No symbol) [0x00BC5D81]\n\t(No symbol) [0x00BC9335]\n\t(No symbol) [0x00C4F531]\n\t(No symbol) [0x00C2D29C]\n\t(No symbol) [0x00C4E61B]\n\t(No symbol) [0x00C2D096]\n\t(No symbol) [0x00BFC840]\n\t(No symbol) [0x00BFD6A4]\n\tGetHandleVerifier [0x01024523+2701795]\n\tGetHandleVerifier [0x0101FCA6+2683238]\n\tGetHandleVerifier [0x0103A9EE+2793134]\n\tGetHandleVerifier [0x00DB68C5+155013]\n\tGetHandleVerifier [0x00DBCFAD+181357]\n\tGetHandleVerifier [0x00DA7458+92440]\n\tGetHandleVerifier [0x00DA7600+92864]\n\tGetHandleVerifier [0x00D91FF0+5296]\n\tBaseThreadInitThunk [0x757BFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x779782AE+286]\n\tRtlGetAppContainerNamedObjectPath [0x7797827E+238]","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5faa5c0f7fedeb778a5dfad14748b78c\")>\n\n    @allure.feature(\"Cart\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title(\"Search Products and Verify Cart After Login\")\n    @allure.description(\"Verify searched products are added to cart and persist after user login.\")\n    def test_search_products_and_verify_cart_after_login(browser):\n        home = HomePage(browser)\n        products = ProductsPage(browser)\n        cart = CartPage(browser)\n        signup_login = SignupLoginPage(browser)\n    \n        # 3. Click on 'Products' button\n        home.click_products()\n    \n        # 4. Verify user is navigated to ALL PRODUCTS page successfully\n        assert products.is_all_products_page_displayed(), \"All Products page not visible\"\n    \n        # 5. Enter product name in search input and click search button\n        product_info = load_test_data(\"products.json\")  # Test Data initialized\n        search_data = product_info[\"search\"]\n    \n        product_name = search_data[\"product_search\"]  # Fetched product name from json\n        products.enter_search_text(product_name)\n        products.click_search_button()\n    \n        # 6. Verify 'SEARCHED PRODUCTS' is visible\n        assert products.is_searched_products_section_visible(), \"Searched Products section not visible\"\n    \n        # 7. Verify all the products related to search are visible\n        assert products.are_search_results_visible(product_name), f\"Search results for '{product_name}' are not displayed correctly\"\n    \n        # 8. Add those products to cart: for faster test we are only adding two products to cart\n        product_1_name, product_1_price = products.hover_and_add_to_cart_and_get_price(1) # over and add first product to cart, capture price\n    \n        print(product_1_name)\n        products.click_continue_shopping()\n        product_2_name, product_2_price = products.hover_and_add_to_cart_and_get_price(2) # Hover and add second product to cart, capture price\n    \n        added_products = [product_1_name, product_2_name]\n        # 9. Click 'Cart' button and verify that products are visible in cart\n        products.click_view_cart()\n    \n        assert cart.are_products_in_cart(added_products), \"First product not found in cart\"  # Verify Product-1 is on cart\n        #assert cart.are_products_in_cart(product_2_name), \"Second product not found in cart\"  # Verify Product-2 is on cart\n    \n        assert cart.verify_product_details(1, product_1_price), \"Product 1 price/quantity/total is incorrect\"  # Verify Product-1 details is correct on cart\n        assert cart.verify_product_details(2, product_2_price), \"Product 2 price/quantity/total is incorrect\"  # Verify Product-1 details is correct on cart\n    \n        # 10. Click 'Signup / Login' button and submit login details\n        home.click_signup_login()\n        user_info = load_test_data(\"users.json\")  # Test data loaded from json file\n        correct_credential = user_info[\"valid_user\"]\n        signup_login.login_user(\n            email=correct_credential[\"email\"],\n            password=correct_credential[\"password\"])\n    \n        # 11. Again, go to Cart page\n>       home.click_cart_button()\n\ntestCases\\test_020_search_products_and_verify_cart_after_login.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\home_page.py:100: in click_cart_button\n    self.click(self.CART_BUTTON)\npageObjects\\base_page.py:43: in click\n    element = self.wait.until(EC.element_to_be_clickable(target))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:634: in _predicate\n    element = visibility_of(target)(driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:260: in _predicate\n    return _element_if_visible(element)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:280: in _element_if_visible\n    return element if element.is_displayed() == visibility else False\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:340: in is_displayed\n    return self.parent.execute_script(f\"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);\", self)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:528: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025890747D10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x779782AE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7797827E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=136.0.7103.114); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00D9FC03+61635]\nE       \tGetHandleVerifier [0x00D9FC44+61700]\nE       \t(No symbol) [0x00BC05D3]\nE       \t(No symbol) [0x00BD2061]\nE       \t(No symbol) [0x00BD1140]\nE       \t(No symbol) [0x00BC7880]\nE       \t(No symbol) [0x00BC795C]\nE       \t(No symbol) [0x00BC5D81]\nE       \t(No symbol) [0x00BC9335]\nE       \t(No symbol) [0x00C4F531]\nE       \t(No symbol) [0x00C2D29C]\nE       \t(No symbol) [0x00C4E61B]\nE       \t(No symbol) [0x00C2D096]\nE       \t(No symbol) [0x00BFC840]\nE       \t(No symbol) [0x00BFD6A4]\nE       \tGetHandleVerifier [0x01024523+2701795]\nE       \tGetHandleVerifier [0x0101FCA6+2683238]\nE       \tGetHandleVerifier [0x0103A9EE+2793134]\nE       \tGetHandleVerifier [0x00DB68C5+155013]\nE       \tGetHandleVerifier [0x00DBCFAD+181357]\nE       \tGetHandleVerifier [0x00DA7458+92440]\nE       \tGetHandleVerifier [0x00DA7600+92864]\nE       \tGetHandleVerifier [0x00D91FF0+5296]\nE       \tBaseThreadInitThunk [0x757BFCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x779782AE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x7797827E+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"config","time":{"start":1748710197399,"stop":1748710197399,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"browser","time":{"start":1748710608210,"stop":1748710618984,"duration":10774},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Verify searched products are added to cart and persist after user login.","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=136.0.7103.114); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00D9FC03+61635]\n\tGetHandleVerifier [0x00D9FC44+61700]\n\t(No symbol) [0x00BC05D3]\n\t(No symbol) [0x00BD2061]\n\t(No symbol) [0x00BD1140]\n\t(No symbol) [0x00BC7880]\n\t(No symbol) [0x00BC795C]\n\t(No symbol) [0x00BC5D81]\n\t(No symbol) [0x00BC9335]\n\t(No symbol) [0x00C4F531]\n\t(No symbol) [0x00C2D29C]\n\t(No symbol) [0x00C4E61B]\n\t(No symbol) [0x00C2D096]\n\t(No symbol) [0x00BFC840]\n\t(No symbol) [0x00BFD6A4]\n\tGetHandleVerifier [0x01024523+2701795]\n\tGetHandleVerifier [0x0101FCA6+2683238]\n\tGetHandleVerifier [0x0103A9EE+2793134]\n\tGetHandleVerifier [0x00DB68C5+155013]\n\tGetHandleVerifier [0x00DBCFAD+181357]\n\tGetHandleVerifier [0x00DA7458+92440]\n\tGetHandleVerifier [0x00DA7600+92864]\n\tGetHandleVerifier [0x00D91FF0+5296]\n\tBaseThreadInitThunk [0x757BFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x779782AE+286]\n\tRtlGetAppContainerNamedObjectPath [0x7797827E+238]","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5faa5c0f7fedeb778a5dfad14748b78c\")>\n\n    @allure.feature(\"Cart\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title(\"Search Products and Verify Cart After Login\")\n    @allure.description(\"Verify searched products are added to cart and persist after user login.\")\n    def test_search_products_and_verify_cart_after_login(browser):\n        home = HomePage(browser)\n        products = ProductsPage(browser)\n        cart = CartPage(browser)\n        signup_login = SignupLoginPage(browser)\n    \n        # 3. Click on 'Products' button\n        home.click_products()\n    \n        # 4. Verify user is navigated to ALL PRODUCTS page successfully\n        assert products.is_all_products_page_displayed(), \"All Products page not visible\"\n    \n        # 5. Enter product name in search input and click search button\n        product_info = load_test_data(\"products.json\")  # Test Data initialized\n        search_data = product_info[\"search\"]\n    \n        product_name = search_data[\"product_search\"]  # Fetched product name from json\n        products.enter_search_text(product_name)\n        products.click_search_button()\n    \n        # 6. Verify 'SEARCHED PRODUCTS' is visible\n        assert products.is_searched_products_section_visible(), \"Searched Products section not visible\"\n    \n        # 7. Verify all the products related to search are visible\n        assert products.are_search_results_visible(product_name), f\"Search results for '{product_name}' are not displayed correctly\"\n    \n        # 8. Add those products to cart: for faster test we are only adding two products to cart\n        product_1_name, product_1_price = products.hover_and_add_to_cart_and_get_price(1) # over and add first product to cart, capture price\n    \n        print(product_1_name)\n        products.click_continue_shopping()\n        product_2_name, product_2_price = products.hover_and_add_to_cart_and_get_price(2) # Hover and add second product to cart, capture price\n    \n        added_products = [product_1_name, product_2_name]\n        # 9. Click 'Cart' button and verify that products are visible in cart\n        products.click_view_cart()\n    \n        assert cart.are_products_in_cart(added_products), \"First product not found in cart\"  # Verify Product-1 is on cart\n        #assert cart.are_products_in_cart(product_2_name), \"Second product not found in cart\"  # Verify Product-2 is on cart\n    \n        assert cart.verify_product_details(1, product_1_price), \"Product 1 price/quantity/total is incorrect\"  # Verify Product-1 details is correct on cart\n        assert cart.verify_product_details(2, product_2_price), \"Product 2 price/quantity/total is incorrect\"  # Verify Product-1 details is correct on cart\n    \n        # 10. Click 'Signup / Login' button and submit login details\n        home.click_signup_login()\n        user_info = load_test_data(\"users.json\")  # Test data loaded from json file\n        correct_credential = user_info[\"valid_user\"]\n        signup_login.login_user(\n            email=correct_credential[\"email\"],\n            password=correct_credential[\"password\"])\n    \n        # 11. Again, go to Cart page\n>       home.click_cart_button()\n\ntestCases\\test_020_search_products_and_verify_cart_after_login.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\home_page.py:100: in click_cart_button\n    self.click(self.CART_BUTTON)\npageObjects\\base_page.py:43: in click\n    element = self.wait.until(EC.element_to_be_clickable(target))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:634: in _predicate\n    element = visibility_of(target)(driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:260: in _predicate\n    return _element_if_visible(element)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:280: in _element_if_visible\n    return element if element.is_displayed() == visibility else False\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:340: in is_displayed\n    return self.parent.execute_script(f\"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);\", self)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:528: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025890747D10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x779782AE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7797827E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=136.0.7103.114); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00D9FC03+61635]\nE       \tGetHandleVerifier [0x00D9FC44+61700]\nE       \t(No symbol) [0x00BC05D3]\nE       \t(No symbol) [0x00BD2061]\nE       \t(No symbol) [0x00BD1140]\nE       \t(No symbol) [0x00BC7880]\nE       \t(No symbol) [0x00BC795C]\nE       \t(No symbol) [0x00BC5D81]\nE       \t(No symbol) [0x00BC9335]\nE       \t(No symbol) [0x00C4F531]\nE       \t(No symbol) [0x00C2D29C]\nE       \t(No symbol) [0x00C4E61B]\nE       \t(No symbol) [0x00C2D096]\nE       \t(No symbol) [0x00BFC840]\nE       \t(No symbol) [0x00BFD6A4]\nE       \tGetHandleVerifier [0x01024523+2701795]\nE       \tGetHandleVerifier [0x0101FCA6+2683238]\nE       \tGetHandleVerifier [0x0103A9EE+2793134]\nE       \tGetHandleVerifier [0x00DB68C5+155013]\nE       \tGetHandleVerifier [0x00DBCFAD+181357]\nE       \tGetHandleVerifier [0x00DA7458+92440]\nE       \tGetHandleVerifier [0x00DA7600+92864]\nE       \tGetHandleVerifier [0x00D91FF0+5296]\nE       \tBaseThreadInitThunk [0x757BFCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x779782AE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x7797827E+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException","steps":[],"attachments":[{"uid":"e43e143db1b6c829","name":"screenshot_on_failure","source":"e43e143db1b6c829.png","type":"image/png","size":910941},{"uid":"18bae1741d56b66a","name":"log","source":"18bae1741d56b66a.txt","type":"text/plain","size":5098},{"uid":"a0b11be1a4539908","name":"stdout","source":"a0b11be1a4539908.txt","type":"text/plain","size":267},{"uid":"298a7ea1a46adced","name":"stderr","source":"298a7ea1a46adced.txt","type":"text/plain","size":9148}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"browser::0","time":{"start":1748710635286,"stop":1748710638701,"duration":3415},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Cart"},{"name":"severity","value":"critical"},{"name":"parentSuite","value":"testCases"},{"name":"suite","value":"test_020_search_products_and_verify_cart_after_login"},{"name":"host","value":"DESKTOP-6JB123S"},{"name":"thread","value":"14564-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCases.test_020_search_products_and_verify_cart_after_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"d39657b01b45aa62.json","parameterValues":[]}