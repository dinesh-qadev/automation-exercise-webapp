{"uid":"f5e5f4259316d26c","name":"Register User","fullName":"testCases.test_001_register_user#test_register_user","historyId":"4600bb7d7d7d2ed0c78ca57901abb55f","time":{"start":1748710123627,"stop":1748710123627,"duration":0},"description":"Verify new user can register with valid details and account is created.","descriptionHtml":"<p>Verify new user can register with valid details and account is created.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: chrome=136.0.7103.114)\nStacktrace:\n\tGetHandleVerifier [0x00D9FC03+61635]\n\tGetHandleVerifier [0x00D9FC44+61700]\n\t(No symbol) [0x00BC05D3]\n\t(No symbol) [0x00BBDBE0]\n\t(No symbol) [0x00BB13A8]\n\t(No symbol) [0x00BB2CF0]\n\t(No symbol) [0x00BB1638]\n\t(No symbol) [0x00BB1193]\n\t(No symbol) [0x00BB0EA1]\n\t(No symbol) [0x00BAEE80]\n\t(No symbol) [0x00BAF81B]\n\t(No symbol) [0x00BC3FFE]\n\t(No symbol) [0x00C4F217]\n\t(No symbol) [0x00C2D29C]\n\t(No symbol) [0x00C4E61B]\n\t(No symbol) [0x00C2D096]\n\t(No symbol) [0x00BFC840]\n\t(No symbol) [0x00BFD6A4]\n\tGetHandleVerifier [0x01024523+2701795]\n\tGetHandleVerifier [0x0101FCA6+2683238]\n\tGetHandleVerifier [0x0103A9EE+2793134]\n\tGetHandleVerifier [0x00DB68C5+155013]\n\tGetHandleVerifier [0x00DBCFAD+181357]\n\tGetHandleVerifier [0x00DA7458+92440]\n\tGetHandleVerifier [0x00DA7600+92864]\n\tGetHandleVerifier [0x00D91FF0+5296]\n\tBaseThreadInitThunk [0x757BFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x779782AE+286]\n\tRtlGetAppContainerNamedObjectPath [0x7797827E+238]","statusTrace":"config = <class 'configurations.config.QAConfig'>, request = <SubRequest 'browser' for <Function test_register_user>>\n\n    @pytest.fixture(scope=\"function\")\n    def browser(config, request):\n        # Read the --headed flag\n        headed = request.config.getoption(\"--headed\")\n        options = Options()\n    \n        if not headed:\n            options.add_argument(\"--headless=new\")\n            options.add_argument(\"--disable-gpu\")\n    \n        options.add_argument(\"--window-size=1920,1080\")\n        options.add_argument(\"--no-sandbox\")  # required in many CI environments\n        options.add_argument(\"--disable-dev-shm-usage\")  # overcome limited /dev/shm\n        options.add_argument(\"--disable-extensions\")\n        options.add_argument(\"--remote-allow-origins=*\")  # helps with Chrome 111+\n    \n        # Use a temp user data dir to avoid \"profile in use\" errors\n        temp_user_data_dir = tempfile.mkdtemp()\n        options.add_argument(f\"--user-data-dir={temp_user_data_dir}\")\n    \n        # Setup Chrome browser\n        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)\n    \n        driver.maximize_window()\n    \n>       driver.get(config.BASE_URL)\n\nconftest.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A09791F490>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_NAME_NOT_RESOLVED\\\\n  (...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x779782AE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7797827E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\nE         (Session info: chrome=136.0.7103.114)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00D9FC03+61635]\nE       \tGetHandleVerifier [0x00D9FC44+61700]\nE       \t(No symbol) [0x00BC05D3]\nE       \t(No symbol) [0x00BBDBE0]\nE       \t(No symbol) [0x00BB13A8]\nE       \t(No symbol) [0x00BB2CF0]\nE       \t(No symbol) [0x00BB1638]\nE       \t(No symbol) [0x00BB1193]\nE       \t(No symbol) [0x00BB0EA1]\nE       \t(No symbol) [0x00BAEE80]\nE       \t(No symbol) [0x00BAF81B]\nE       \t(No symbol) [0x00BC3FFE]\nE       \t(No symbol) [0x00C4F217]\nE       \t(No symbol) [0x00C2D29C]\nE       \t(No symbol) [0x00C4E61B]\nE       \t(No symbol) [0x00C2D096]\nE       \t(No symbol) [0x00BFC840]\nE       \t(No symbol) [0x00BFD6A4]\nE       \tGetHandleVerifier [0x01024523+2701795]\nE       \tGetHandleVerifier [0x0101FCA6+2683238]\nE       \tGetHandleVerifier [0x0103A9EE+2793134]\nE       \tGetHandleVerifier [0x00DB68C5+155013]\nE       \tGetHandleVerifier [0x00DBCFAD+181357]\nE       \tGetHandleVerifier [0x00DA7458+92440]\nE       \tGetHandleVerifier [0x00DA7600+92864]\nE       \tGetHandleVerifier [0x00D91FF0+5296]\nE       \tBaseThreadInitThunk [0x757BFCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x779782AE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x7797827E+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"config","time":{"start":1748710123629,"stop":1748710123629,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"browser","time":{"start":1748710123629,"stop":1748710130187,"duration":6558},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: chrome=136.0.7103.114)\nStacktrace:\n\tGetHandleVerifier [0x00D9FC03+61635]\n\tGetHandleVerifier [0x00D9FC44+61700]\n\t(No symbol) [0x00BC05D3]\n\t(No symbol) [0x00BBDBE0]\n\t(No symbol) [0x00BB13A8]\n\t(No symbol) [0x00BB2CF0]\n\t(No symbol) [0x00BB1638]\n\t(No symbol) [0x00BB1193]\n\t(No symbol) [0x00BB0EA1]\n\t(No symbol) [0x00BAEE80]\n\t(No symbol) [0x00BAF81B]\n\t(No symbol) [0x00BC3FFE]\n\t(No symbol) [0x00C4F217]\n\t(No symbol) [0x00C2D29C]\n\t(No symbol) [0x00C4E61B]\n\t(No symbol) [0x00C2D096]\n\t(No symbol) [0x00BFC840]\n\t(No symbol) [0x00BFD6A4]\n\tGetHandleVerifier [0x01024523+2701795]\n\tGetHandleVerifier [0x0101FCA6+2683238]\n\tGetHandleVerifier [0x0103A9EE+2793134]\n\tGetHandleVerifier [0x00DB68C5+155013]\n\tGetHandleVerifier [0x00DBCFAD+181357]\n\tGetHandleVerifier [0x00DA7458+92440]\n\tGetHandleVerifier [0x00DA7600+92864]\n\tGetHandleVerifier [0x00D91FF0+5296]\n\tBaseThreadInitThunk [0x757BFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x779782AE+286]\n\tRtlGetAppContainerNamedObjectPath [0x7797827E+238]\n\n","statusTrace":"  File \"D:\\automation-exercise-webapp\\venv\\Lib\\site-packages\\pluggy\\_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"D:\\automation-exercise-webapp\\venv\\Lib\\site-packages\\_pytest\\setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"D:\\automation-exercise-webapp\\venv\\Lib\\site-packages\\pluggy\\_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\automation-exercise-webapp\\venv\\Lib\\site-packages\\_pytest\\fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\automation-exercise-webapp\\venv\\Lib\\site-packages\\_pytest\\fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"D:\\automation-exercise-webapp\\conftest.py\", line 70, in browser\n    driver.get(config.BASE_URL)\n  File \"D:\\automation-exercise-webapp\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 454, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"D:\\automation-exercise-webapp\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\automation-exercise-webapp\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"User Authentication"},{"name":"severity","value":"blocker"},{"name":"parentSuite","value":"testCases"},{"name":"suite","value":"test_001_register_user"},{"name":"host","value":"DESKTOP-6JB123S"},{"name":"thread","value":"8228-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCases.test_001_register_user"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"f5e5f4259316d26c.json","parameterValues":[]}